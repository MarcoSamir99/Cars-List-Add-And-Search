{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\"; //nano id is a func help us to use randomly generated ids          \n\nconst carsSlice = createSlice({\n  name: 'cars',\n  initialState: {\n    searchTerm: '',\n    data: []\n  },\n  reducers: {\n    changeSearchTerm(state, action) {\n      state.searchTerm = action.payload;\n    },\n    addCar(state, action) {\n      state.data.push({\n        name: action.payload.name,\n        //it's just an assumption\n        cost: action.payload.cost,\n        //it's just an assumption\n        id: nanoid()\n      });\n    },\n    removeCar(state, action) {\n      const updated = state.data.filter(car => {\n        //filter to update the cars that its id not = the deleted id\n        return car.id !== action.payload;\n      });\n      state.cars = updated;\n    }\n  }\n});\nexport const {\n  changeSearchTerm,\n  addCar,\n  removeCar\n} = carsSlice.actions;\nexport const carsReducer = carsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","carsSlice","name","initialState","searchTerm","data","reducers","changeSearchTerm","state","action","payload","addCar","push","cost","id","removeCar","updated","filter","car","cars","actions","carsReducer","reducer"],"sources":["D:/Prog courses/New folder/React/1/cars/src/store/slices/carsSlice.js"],"sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";    //nano id is a func help us to use randomly generated ids          \r\n\r\nconst carsSlice = createSlice({\r\n    name: 'cars',\r\n    initialState: {\r\n        searchTerm: '',\r\n        data: []\r\n    },\r\n    reducers: {\r\n        changeSearchTerm(state, action) {\r\n            state.searchTerm = action.payload;\r\n        },\r\n        addCar(state, action) {\r\n            state.data.push({\r\n                name: action.payload.name,  //it's just an assumption\r\n                cost: action.payload.cost,  //it's just an assumption\r\n                id: nanoid(),\r\n            });\r\n        },\r\n        removeCar(state, action) {\r\n            const updated = state.data.filter((car) => {  //filter to update the cars that its id not = the deleted id\r\n                return car.id !== action.payload;\r\n            });\r\n            state.cars = updated;\r\n        },\r\n    }\r\n});\r\n\r\nexport const {\r\n    changeSearchTerm, addCar, removeCar\r\n} = carsSlice.actions\r\n\r\nexport const carsReducer = carsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB,CAAC,CAAI;;AAE3D,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC1BG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACVC,UAAU,EAAE,EAAE;IACdC,IAAI,EAAE;EACV,CAAC;EACDC,QAAQ,EAAE;IACNC,gBAAgBA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC5BD,KAAK,CAACJ,UAAU,GAAGK,MAAM,CAACC,OAAO;IACrC,CAAC;IACDC,MAAMA,CAACH,KAAK,EAAEC,MAAM,EAAE;MAClBD,KAAK,CAACH,IAAI,CAACO,IAAI,CAAC;QACZV,IAAI,EAAEO,MAAM,CAACC,OAAO,CAACR,IAAI;QAAG;QAC5BW,IAAI,EAAEJ,MAAM,CAACC,OAAO,CAACG,IAAI;QAAG;QAC5BC,EAAE,EAAEd,MAAM;MACd,CAAC,CAAC;IACN,CAAC;IACDe,SAASA,CAACP,KAAK,EAAEC,MAAM,EAAE;MACrB,MAAMO,OAAO,GAAGR,KAAK,CAACH,IAAI,CAACY,MAAM,CAAEC,GAAG,IAAK;QAAG;QAC1C,OAAOA,GAAG,CAACJ,EAAE,KAAKL,MAAM,CAACC,OAAO;MACpC,CAAC,CAAC;MACFF,KAAK,CAACW,IAAI,GAAGH,OAAO;IACxB;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EACTT,gBAAgB;EAAEI,MAAM;EAAEI;AAC9B,CAAC,GAAGd,SAAS,CAACmB,OAAO;AAErB,OAAO,MAAMC,WAAW,GAAGpB,SAAS,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}